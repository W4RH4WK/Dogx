#!/usr/bin/env python3

import os

from base64 import b64encode
from pandocfilters import toJSONFilter, Image, RawBlock, RawInline
from subprocess import check_output

TPL_DIR = os.path.dirname(os.path.realpath(__file__))
TP_DIR = os.path.realpath(os.path.join(TPL_DIR, '..', 'third_party'))


def tex2svg(content, template=None):
    cmd = [os.path.join(TP_DIR, 'tex2svg', 'tex2svg')]

    if template:
           cmd.append(os.path.join(TPL_DIR, template))

    svg = check_output(cmd, input=content.encode())
    svg = b64encode(svg).decode()
    return 'data:image/svg+xml;base64,{}'.format(svg)


def latex(key, value, format, meta):
    def asSvg(content):
        svg = tex2svg(content, 'latex.tex')
        svg = '<p><img src="{}" class="latex-DisplayMath" /></p>'.format(svg)
        return RawBlock('html', svg)

    # handle display math
    if key == 'Para' and value[0]['t'] == 'Math' and value[0]['c'][0]['t'] == 'DisplayMath':
        return asSvg("$${}$$".format(value[0]['c'][1]))

    # handle raw inline tex
    if key == 'Para' and value[0]['t'] == 'RawInline' and value[0]['c'][0] == 'tex':
        return asSvg(value[-1]['c'][1])

    # handle possible tikz picture
    if key == 'Image':
        attr, caption, src = value[0], value[1], value[2][0]

        if not os.path.exists(src) or os.path.splitext(src)[1] != '.tikz':
            return

        attr[1].append('latex-tikz')

        with open(src, 'r') as ftikz:
            svg = tex2svg(ftikz.read(), 'tikz.tex')

        return Image(attr, caption, [svg, 'fig:'])


if __name__ == '__main__':
    toJSONFilter(latex)
